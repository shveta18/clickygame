{"version":3,"sources":["components/ImageCards/index.js","components/Title/index.js","components/Wrapper/index.js","components/ScoreCard/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCards","props","className","alt","name","src","image","onClick","shuffleImage","id","Title","children","Wrapper","Score","state","currentScore","gameScore","userClicks","setState","this","React","Component","shuffle","a","i","length","j","Math","floor","random","App","images","console","log","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"ikEAiBeA,MAbf,SAAoBC,GAClB,OACE,6BACI,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,cAAcC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MACzDC,QAAS,kBAAMN,EAAMO,aAAaP,EAAMQ,U,MCKnCC,MAXf,SAAeT,GACX,OACI,6BACI,yBAAKC,UAAU,gCACX,wBAAIA,UAAU,SAASD,EAAMU,UADjC,O,aCCGC,MAJf,SAAiBX,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,WCyB1BE,E,4MAzBXC,MAAQ,CACJC,aAAc,EACdC,UAAW,G,EAKnBC,WAAa,WACT,EAAKC,SAAS,CAAEH,aAAc,EAAKD,MAAMC,aAAe,K,uDAOxD,OACI,6BAEI,wBAAIb,UAAU,SAAd,UAA8BiB,KAAKL,MAAMC,cACzC,wBAAIb,UAAU,aAAd,cAAsCiB,KAAKL,MAAME,gB,GApBzCI,IAAMC,WCK1B,SAASC,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADP,EAEpB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFgC,KAE5BD,EAAEG,GAF0B,KAIvC,OAAOH,E,IAgDQO,E,4MA3CfhB,MAAQ,CACNiB,U,EAIFvB,aAAe,SAAAC,GACba,EAAQS,GAQVC,QAAQC,IAAIF,GACZ,EAAKb,SAAS,CAACa,Y,uDAKL,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,oBACA,kBAAC,EAAD,MACCZ,KAAKL,MAAMiB,OAAOG,KAAI,SAAAH,GAAM,OAC3B,kBAAC,EAAD,CACEvB,aAAc,EAAKA,aACnB2B,IAAKJ,EAAOtB,GACZL,KAAM2B,EAAO3B,KACbE,MAAOyB,EAAOzB,gB,GAhCRe,aCJEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7a3ec5a8.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\n\nfunction ImageCards(props) {\n  return (\n    <div>\n        <div className=\"img-container\">\n          <img className=\"click-image\" alt={props.name} src={props.image} \n          onClick={() => props.shuffleImage(props.id)}\n          />\n        </div>\n      </div>\n    \n  );\n}\n\nexport default ImageCards;\n\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n    return (\n        <div>\n            <nav className=\"navbar navbar-light bg-light\">\n                <h1 className=\"title\">{props.children}</h1>;\n</nav>\n        </div>\n\n    )\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\n\nclass Score extends React.Component {\n    state = {\n        currentScore: 0,\n        gameScore: 0\n    };\n\n\n// create a function to register click on image\nuserClicks = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 } );\n}\n// amend function to store which ID was clicked\n// amend function to verify if ID not clicked, increment score by 1 and gamescore by 1\n// if ID was already clicked, change currentscore to 0, retain gameScore to highest value\n// if homepage was clicked set the score back to 0\nrender() {\n    return (\n        <div>\n\n            <h2 className=\"score\">Score: {this.state.currentScore}</h2>\n            <h2 className=\"gameScore\">GameScore: {this.state.gameScore}</h2>\n        </div>\n    );\n}\n}\n\nexport default Score;","import React, { Component } from \"react\";\n// import react, components and the json file \nimport ImageCards from \"./components/ImageCards\";\nimport Title from \"./components/Title\";\nimport images from \"./images.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/ScoreCard\";\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    images\n  };\n\n  \n  shuffleImage = id => {\n    shuffle(images);\n    // when any image is clicked, the images are shuffled at random\n    // create a randomized ID\n // let randomizedID = Math.floor(Math.random() * 14) + 1 ; \n\n  // assign this randomized id as the key for the array \n\n  // newly updated array of images\n  console.log(images);\n  this.setState({images});\n  }\n\n  // create scorecard values \n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Tudor Court</Title>\n        <Score/>\n        {this.state.images.map(images => (\n          <ImageCards\n            shuffleImage={this.shuffleImage}\n            key={images.id}\n            name={images.name}\n            image={images.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n\n\n  // render the component to display the new images per the shuffle\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}